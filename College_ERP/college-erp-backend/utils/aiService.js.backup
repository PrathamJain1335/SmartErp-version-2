const OpenAI = require('openai');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

class AIService {
  static async generateChatResponse(userMessage, userRole, context = {}) {
    try {
      let systemPrompt = '';
      
      if (userRole === 'student') {
        systemPrompt = `You are a helpful AI assistant for college students. You help with:
        - Academic questions and study guidance
        - Assignment help and explanations
        - Course information
        - Time management and study tips
        - General college life advice
        Keep responses concise, encouraging, and educational.`;
      } else if (userRole === 'faculty') {
        systemPrompt = `You are an AI assistant for college faculty. You help with:
        - Curriculum planning and teaching strategies
        - Student assessment and feedback
        - Academic analytics insights
        - Course management
        - Educational technology tips
        Keep responses professional and focused on teaching excellence.`;
      } else {
        systemPrompt = `You are an AI assistant for college administration. You help with:
        - Institutional analytics and insights
        - Administrative processes
        - Student and faculty management
        - Policy recommendations
        - Data-driven decision making
        Keep responses professional and strategic.`;
      }

      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userMessage }
        ],
        max_tokens: 500,
        temperature: 0.7,
      });

      return completion.choices[0].message.content;
    } catch (error) {
      console.error('AI Service Error:', error);
      // Return fallback response based on user role instead of throwing error
      return this.getFallbackResponse(userMessage, userRole, context);
    }
  }

  static getFallbackResponse(userMessage, userRole, context = {}) {
    const message = userMessage.toLowerCase();
    
    // Common greeting responses
    if (message.includes('hello') || message.includes('hi') || message.includes('hey')) {
      if (userRole === 'student') {
        return `Hello ${context.name || 'there'}! I'm your AI academic assistant. I can help you with:
‚Ä¢ Study plans and time management
‚Ä¢ Assignment guidance
‚Ä¢ Course information
‚Ä¢ Academic performance insights
‚Ä¢ General study tips

What would you like to know about?`;
      } else if (userRole === 'faculty') {
        return `Hello ${context.name || 'Professor'}! I'm here to assist you with:
‚Ä¢ Teaching strategies and curriculum planning
‚Ä¢ Student performance analysis
‚Ä¢ Assignment grading assistance
‚Ä¢ Course management
‚Ä¢ Educational insights

How can I support your teaching today?`;
      } else {
        return `Hello! I'm your AI assistant for college administration. I can help you with:
‚Ä¢ Institutional analytics
‚Ä¢ Student and faculty management
‚Ä¢ Performance reports
‚Ä¢ Administrative processes
‚Ä¢ Strategic planning

What administrative task can I assist you with?`;
      }
    }
    
    // Attendance related questions
    if (message.includes('attendance')) {
      if (userRole === 'student') {
        const currentAttendance = context.attendance || 'N/A';
        return `I can help you improve your attendance! Here are some strategies:

üìä Your current attendance: ${currentAttendance}%

üí° Tips to improve attendance:
‚Ä¢ Set multiple alarms and prepare the night before
‚Ä¢ Create a consistent morning routine
‚Ä¢ Find a study buddy for accountability
‚Ä¢ Schedule your day around class times
‚Ä¢ Track your attendance weekly to stay motivated
‚Ä¢ Speak with your professors if you're facing challenges

üìù Remember: Most colleges require 75% attendance for eligibility. If you're below this, prioritize attending every class moving forward!

Would you like specific tips for morning motivation or managing your schedule?`;
      } else if (userRole === 'faculty') {
        return `For attendance management, I can help you with:
‚Ä¢ Tracking student attendance patterns
‚Ä¢ Identifying students with attendance issues
‚Ä¢ Creating attendance improvement strategies
‚Ä¢ Setting up automated attendance reminders
‚Ä¢ Analyzing attendance vs performance correlation

What specific attendance challenge would you like to address?`;
      }
    }
    
    // Help with assignments
    if (message.includes('assignment') || message.includes('homework')) {
      if (userRole === 'student') {
        return `I can help you with assignments! Here are some ways:
‚Ä¢ Breaking down complex tasks into manageable steps
‚Ä¢ Suggesting research resources and study materials
‚Ä¢ Time management for meeting deadlines
‚Ä¢ Understanding assignment requirements
‚Ä¢ Providing study strategies for different subjects

What specific help do you need with your assignment?`;
      } else if (userRole === 'faculty') {
        return `For assignment management, I can assist with:
‚Ä¢ Creating assignment rubrics and guidelines
‚Ä¢ Analyzing student submission patterns
‚Ä¢ Suggesting grading strategies
‚Ä¢ Identifying common student challenges
‚Ä¢ Planning assignment difficulty progression

What aspect of assignment management would you like help with?`;
      }
    }
    
    // Study related questions
    if (message.includes('study') || message.includes('studying') || message.includes('exam') || message.includes('test')) {
      if (userRole === 'student') {
        return `I can help you create an effective study plan! Here are some proven strategies:

üìö Study Techniques:
‚Ä¢ Use the Pomodoro Technique (25 min focused study + 5 min break)
‚Ä¢ Practice active recall instead of just re-reading
‚Ä¢ Create summary notes and mind maps
‚Ä¢ Form study groups with classmates
‚Ä¢ Practice past papers and mock tests

üìÖ Time Management:
‚Ä¢ Break large topics into smaller, manageable chunks
‚Ä¢ Study your hardest subjects when you're most alert
‚Ä¢ Review material regularly, don't wait until exam time

What specific subject or exam are you preparing for?`;
      }
    }
    
    // Time management questions
    if (message.includes('time') && (message.includes('manage') || message.includes('management') || message.includes('schedule'))) {
      if (userRole === 'student') {
        return `Time management is crucial for academic success! Here's how to get better at it:

‚è∞ Daily Planning:
‚Ä¢ Use a planner or digital calendar for all assignments and deadlines
‚Ä¢ Prioritize tasks using the Eisenhower Matrix (urgent vs important)
‚Ä¢ Block time for classes, study, meals, and breaks
‚Ä¢ Set specific study hours for each subject

üé• Productivity Tips:
‚Ä¢ Eliminate distractions during study time
‚Ä¢ Use apps like Forest or Focus Keeper
‚Ä¢ Batch similar tasks together
‚Ä¢ Take regular breaks to avoid burnout

üéÜ Goal Setting:
‚Ä¢ Set weekly and monthly academic goals
‚Ä¢ Break large projects into smaller milestones
‚Ä¢ Reward yourself for completing tasks

What's your biggest time management challenge right now?`;
      }
    }
    
    // Data structures specific help
    if (message.includes('data structure') || message.includes('algorithm') || message.includes('programming')) {
      if (userRole === 'student') {
        return `Data Structures can be challenging! Let me help you master them:

üìö Key Data Structures to Master:
‚Ä¢ Arrays & Linked Lists - Foundation concepts
‚Ä¢ Stacks & Queues - LIFO and FIFO principles
‚Ä¢ Trees (Binary, BST, AVL) - Hierarchical data
‚Ä¢ Graphs - Networks and relationships
‚Ä¢ Hash Tables - Fast data retrieval

üíª Study Approach:
‚Ä¢ Visualize each data structure (draw diagrams!)
‚Ä¢ Implement each one from scratch in your preferred language
‚Ä¢ Practice coding problems on LeetCode, HackerRank
‚Ä¢ Understand time/space complexity (Big O notation)
‚Ä¢ Connect concepts to real-world applications

üó∫Ô∏è Resources:
‚Ä¢ Visualize algorithms with online simulators
‚Ä¢ Practice with coding interview platforms
‚Ä¢ Join study groups or coding clubs

Which specific data structure are you struggling with?`;
      }
    }
    
    // Help with grades/performance
    if (message.includes('grade') || message.includes('performance') || message.includes('marks')) {
      if (userRole === 'student') {
        return `I can help you improve your academic performance! Here's how:
‚Ä¢ Analyzing your current grades and identifying improvement areas
‚Ä¢ Creating personalized study plans
‚Ä¢ Suggesting effective study techniques
‚Ä¢ Time management strategies
‚Ä¢ Exam preparation tips

Would you like me to help analyze your performance or create a study plan?`;
      } else if (userRole === 'faculty') {
        return `For grade and performance management, I can help with:
‚Ä¢ Analyzing class performance trends
‚Ä¢ Identifying students who need extra support
‚Ä¢ Creating fair grading rubrics
‚Ä¢ Performance tracking strategies
‚Ä¢ Data-driven teaching insights

What performance analysis would you like me to help with?`;
      }
    }
    
    // General fallback
    const generalResponses = {
      student: `I'm here to help you succeed academically! I can assist with study planning, assignment guidance, performance analysis, and academic advice. What specific area would you like help with today?`,
      faculty: `I'm here to support your teaching excellence! I can help with curriculum planning, student assessment, performance analytics, and teaching strategies. What would you like assistance with?`,
      admin: `I'm here to support your administrative needs! I can help with institutional analytics, student management, faculty coordination, and strategic planning. What administrative task can I assist with?`
    };
    
    return generalResponses[userRole] || "I'm here to help! Please let me know what you'd like assistance with.";
  }

  static async generateStudyRecommendations(studentData) {
    try {
      const { subjects, currentGrades, attendancePercent, weakAreas } = studentData;
      
      const prompt = `Based on this student's academic profile, provide personalized study recommendations:
      
      Subjects: ${subjects}
      Current Grades: ${JSON.stringify(currentGrades)}
      Attendance: ${attendancePercent}%
      Weak Areas: ${weakAreas}
      
      Provide 5-6 specific, actionable study recommendations to improve performance.`;

      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 400,
        temperature: 0.6,
      });

      return completion.choices[0].message.content;
    } catch (error) {
      console.error('Study Recommendations Error:', error);
      // Fallback response with personalized recommendations
      const { subjects, currentGrades, attendancePercent, weakAreas } = studentData;
      
      let recommendations = `üìö **Personalized Study Recommendations**\n\n`;
      
      // Attendance-based recommendations
      if (attendancePercent < 75) {
        recommendations += `üö® **Priority: Improve Attendance (Currently ${attendancePercent}%)**\n`;
        recommendations += `‚Ä¢ Set multiple alarms and prepare everything the night before\n`;
        recommendations += `‚Ä¢ Find a study buddy for accountability\n`;
        recommendations += `‚Ä¢ Contact professors to discuss catch-up strategies\n\n`;
      }
      
      // Subject-specific recommendations
      if (subjects && subjects.length > 0) {
        recommendations += `üìñ **Subject-wise Study Plan:**\n`;
        subjects.forEach(subject => {
          recommendations += `‚Ä¢ **${subject}**: Focus on core concepts, practice problems daily (1-2 hours)\n`;
        });
        recommendations += `\n`;
      }
      
      // Grade-based recommendations
      if (currentGrades) {
        const avgGrade = Object.values(currentGrades).reduce((a, b) => a + b, 0) / Object.values(currentGrades).length;
        if (avgGrade < 70) {
          recommendations += `üìà **Performance Improvement (Current Avg: ${avgGrade.toFixed(1)}%)**\n`;
          recommendations += `‚Ä¢ Schedule daily review sessions (30 min per subject)\n`;
          recommendations += `‚Ä¢ Create summary notes and flashcards\n`;
          recommendations += `‚Ä¢ Practice past papers and mock tests\n`;
          recommendations += `‚Ä¢ Form or join study groups\n\n`;
        }
      }
      
      // General recommendations
      recommendations += `‚≠ê **General Study Tips:**\n`;
      recommendations += `‚Ä¢ Use the Pomodoro Technique (25 min study + 5 min break)\n`;
      recommendations += `‚Ä¢ Create a consistent daily study schedule\n`;
      recommendations += `‚Ä¢ Eliminate distractions during study time\n`;
      recommendations += `‚Ä¢ Take regular breaks and maintain work-life balance\n`;
      recommendations += `‚Ä¢ Seek help from professors during office hours\n\n`;
      
      recommendations += `üí° **Remember**: Consistency is key! Small daily improvements lead to significant results.`;
      
      return recommendations;
    }
  }

  static async analyzeAssignment(assignmentText, rubric = null) {
    try {
      let prompt = `Analyze this student assignment and provide constructive feedback:

      Assignment Content: ${assignmentText}`;
      
      if (rubric) {
        prompt += `\nRubric/Criteria: ${rubric}`;
      }
      
      prompt += `\n\nPlease provide:
      1. Strengths of the assignment
      2. Areas for improvement
      3. Suggested grade/score (out of 100)
      4. Specific recommendations for enhancement`;

      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 500,
        temperature: 0.5,
      });

      return completion.choices[0].message.content;
    } catch (error) {
      console.error('Assignment Analysis Error:', error);
      // Fallback response for assignment analysis
      const wordCount = assignmentText.split(' ').length;
      
      let analysis = `üìã **Assignment Analysis Report**\n\n`;
      
      analysis += `üìÑ **Basic Assessment:**\n`;
      analysis += `‚Ä¢ Word Count: ${wordCount} words\n`;
      analysis += `‚Ä¢ Length Assessment: ${wordCount < 200 ? 'Too brief - needs expansion' : wordCount > 1000 ? 'Good length' : 'Adequate length'}\n\n`;
      
      analysis += `‚≠ê **Potential Strengths:**\n`;
      analysis += `‚Ä¢ Clear attempt at addressing the topic\n`;
      analysis += `‚Ä¢ ${wordCount > 300 ? 'Sufficient detail provided' : 'Concise approach'}\n`;
      if (assignmentText.includes('example') || assignmentText.includes('instance')) {
        analysis += `‚Ä¢ Uses examples to support points\n`;
      }
      analysis += `\n`;
      
      analysis += `üìà **Areas for Improvement:**\n`;
      if (wordCount < 300) {
        analysis += `‚Ä¢ Expand on key points with more detailed explanations\n`;
      }
      analysis += `‚Ä¢ Consider adding more specific examples or case studies\n`;
      analysis += `‚Ä¢ Review structure and ensure clear introduction/conclusion\n`;
      analysis += `‚Ä¢ Check for proper citations and references\n\n`;
      
      analysis += `üéØ **Suggested Score: ${wordCount < 200 ? '65-70' : wordCount < 500 ? '70-75' : '75-80'}/100**\n\n`;
      
      analysis += `üí° **Enhancement Recommendations:**\n`;
      analysis += `‚Ä¢ Proofread for grammar and clarity\n`;
      analysis += `‚Ä¢ Add transitional phrases between paragraphs\n`;
      analysis += `‚Ä¢ Include more analytical depth in discussions\n`;
      analysis += `‚Ä¢ Ensure all requirements from rubric are addressed\n`;
      
      return analysis;
    }
  }

  static async predictPerformance(studentHistory) {
    try {
      const { pastGrades, attendanceHistory, assignmentScores, studyHours } = studentHistory;
      
      const prompt = `Based on this student's academic history, predict their likely performance and provide insights:
      
      Past Grades: ${JSON.stringify(pastGrades)}
      Attendance History: ${JSON.stringify(attendanceHistory)}
      Assignment Scores: ${JSON.stringify(assignmentScores)}
      Study Hours per Week: ${studyHours}
      
      Provide:
      1. Performance trend analysis
      2. Predicted next semester performance
      3. Risk factors and opportunities
      4. Actionable recommendations`;

      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 450,
        temperature: 0.6,
      });

      return completion.choices[0].message.content;
    } catch (error) {
      console.error('Performance Prediction Error:', error);
      // Fallback response for performance prediction
      const { pastGrades, attendanceHistory, assignmentScores, studyHours } = studentHistory;
      
      let prediction = `üìà **Performance Prediction Analysis**\n\n`;
      
      // Calculate averages
      const avgGrades = pastGrades ? Object.values(pastGrades).reduce((a, b) => a + b, 0) / Object.values(pastGrades).length : 0;
      const avgAttendance = attendanceHistory ? attendanceHistory.reduce((a, b) => a + b, 0) / attendanceHistory.length : 0;
      const avgAssignments = assignmentScores ? assignmentScores.reduce((a, b) => a + b, 0) / assignmentScores.length : 0;
      
      prediction += `üìÑ **Current Performance Overview:**\n`;
      prediction += `‚Ä¢ Average Grades: ${avgGrades.toFixed(1)}%\n`;
      prediction += `‚Ä¢ Average Attendance: ${avgAttendance.toFixed(1)}%\n`;
      prediction += `‚Ä¢ Assignment Performance: ${avgAssignments.toFixed(1)}%\n`;
      prediction += `‚Ä¢ Weekly Study Hours: ${studyHours || 'Not specified'}\n\n`;
      
      // Trend analysis
      prediction += `üìâ **Trend Analysis:**\n`;
      if (avgGrades >= 80) {
        prediction += `‚Ä¢ Strong academic performance - on track for excellent results\n`;
      } else if (avgGrades >= 70) {
        prediction += `‚Ä¢ Good academic standing - room for improvement to achieve excellence\n`;
      } else {
        prediction += `‚Ä¢ Performance needs attention - immediate action recommended\n`;
      }
      prediction += `\n`;
      
      // Risk factors
      prediction += `‚ö†Ô∏è **Risk Factors:**\n`;
      if (avgAttendance < 75) prediction += `‚Ä¢ Low attendance rate may impact eligibility\n`;
      if (avgGrades < 70) prediction += `‚Ä¢ Below-average grades indicate academic struggle\n`;
      if (studyHours < 20) prediction += `‚Ä¢ Limited study time may affect performance\n`;
      prediction += `\n`;
      
      // Predicted performance
      const predictedGrade = Math.min(100, (avgGrades * 0.4) + (avgAttendance * 0.3) + (avgAssignments * 0.3));
      prediction += `üéØ **Next Semester Prediction: ${predictedGrade.toFixed(1)}%**\n\n`;
      
      // Recommendations
      prediction += `üí° **Actionable Recommendations:**\n`;
      if (avgAttendance < 75) prediction += `‚Ä¢ Priority: Improve attendance to meet minimum requirements\n`;
      if (avgGrades < 80) prediction += `‚Ä¢ Increase daily study time by 1-2 hours\n`;
      prediction += `‚Ä¢ Focus on weak subjects during peak concentration hours\n`;
      prediction += `‚Ä¢ Join study groups or seek peer tutoring\n`;
      prediction += `‚Ä¢ Schedule regular meetings with professors for guidance\n`;
      
      return prediction;
    }
  }

  static async generateTeachingInsights(classData) {
    try {
      const { subject, studentPerformances, commonMistakes, topicsCovered } = classData;
      
      const prompt = `As an educational AI, analyze this class data and provide teaching insights:
      
      Subject: ${subject}
      Student Performance Data: ${JSON.stringify(studentPerformances)}
      Common Student Mistakes: ${commonMistakes}
      Topics Covered: ${topicsCovered}
      
      Provide:
      1. Class performance analysis
      2. Teaching strategy recommendations
      3. Areas needing attention
      4. Suggested interventions for struggling students`;

      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 500,
        temperature: 0.6,
      });

      return completion.choices[0].message.content;
    } catch (error) {
      console.error('Teaching Insights Error:', error);
      throw new Error('Failed to generate teaching insights');
    }
  }

  static async generateInstitutionalAnalytics(institutionData) {
    try {
      const { 
        studentRetentionRate, 
        avgGradeDistribution, 
        departmentPerformances,
        facultyUtilization,
        enrollmentTrends 
      } = institutionData;
      
      const prompt = `Analyze this institutional data and provide strategic insights:
      
      Student Retention Rate: ${studentRetentionRate}%
      Grade Distribution: ${JSON.stringify(avgGradeDistribution)}
      Department Performances: ${JSON.stringify(departmentPerformances)}
      Faculty Utilization: ${JSON.stringify(facultyUtilization)}
      Enrollment Trends: ${JSON.stringify(enrollmentTrends)}
      
      Provide:
      1. Institutional health assessment
      2. Key performance indicators analysis
      3. Strategic recommendations
      4. Areas requiring immediate attention`;

      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 600,
        temperature: 0.5,
      });

      return completion.choices[0].message.content;
    } catch (error) {
      console.error('Institutional Analytics Error:', error);
      throw new Error('Failed to generate institutional analytics');
    }
  }

  static async generateQuizQuestions(subject, topics, difficulty = 'medium', count = 5) {
    try {
      const prompt = `Generate ${count} ${difficulty} difficulty quiz questions for ${subject} covering these topics: ${topics.join(', ')}.
      
      For each question, provide:
      1. The question
      2. 4 multiple choice options (A, B, C, D)
      3. Correct answer
      4. Brief explanation
      
      Format as JSON array.`;

      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 800,
        temperature: 0.7,
      });

      return completion.choices[0].message.content;
    } catch (error) {
      console.error('Quiz Generation Error:', error);
      // Fallback response for quiz generation
      const sampleQuestions = this.generateSampleQuiz(subject, topics, difficulty, count);
      return JSON.stringify(sampleQuestions, null, 2);
    }
  }

  static generateSampleQuiz(subject, topics, difficulty, count) {
    const questions = [];
    
    // Sample questions based on difficulty and subject
    const questionTemplates = {
      easy: [
        {
          question: `What is the basic definition of ${topics[0] || 'the main concept'} in ${subject}?`,
          options: [
            "A fundamental concept in the subject",
            "An advanced technique", 
            "A complex theory",
            "A practical application"
          ],
          correct: "A",
          explanation: `This is a foundational concept that students should understand first.`
        }
      ],
      medium: [
        {
          question: `How does ${topics[0] || 'the main concept'} relate to other topics in ${subject}?`,
          options: [
            "It operates independently",
            "It connects with multiple related concepts",
            "It only applies to specific cases",
            "It has no practical relevance"
          ],
          correct: "B",
          explanation: `Understanding relationships between concepts is crucial for comprehensive learning.`
        }
      ],
      hard: [
        {
          question: `Analyze the complex applications of ${topics[0] || 'the main concept'} in advanced ${subject} scenarios.`,
          options: [
            "Simple direct application only",
            "Multiple interconnected applications with various considerations",
            "Limited to theoretical use",
            "No real-world applications"
          ],
          correct: "B",
          explanation: `Advanced topics require understanding of complex interconnections and practical applications.`
        }
      ]
    };
    
    // Generate questions based on requested count
    for (let i = 0; i < count; i++) {
      const template = questionTemplates[difficulty] && questionTemplates[difficulty][0] || questionTemplates.medium[0];
      const questionNum = i + 1;
      const topic = topics[i % topics.length] || 'general concepts';
      
      questions.push({
        id: `q${questionNum}`,
        question: template.question.replace(topics[0] || 'the main concept', topic),
        options: template.options.map(option => option.replace('concept', topic)),
        correct: template.correct,
        explanation: template.explanation.replace('concepts', topic),
        difficulty: difficulty,
        topic: topic
      });
    }
    
    return questions;
  }

  static async generateStudyPlan(studentProfile, examDate, subjects) {
    try {
      const prompt = `Create a personalized study plan for a student with this profile:
      
      Student Strengths: ${studentProfile.strengths}
      Weak Areas: ${studentProfile.weakAreas}
      Available Study Hours per Day: ${studentProfile.dailyHours}
      Exam Date: ${examDate}
      Subjects to Study: ${subjects.join(', ')}
      Learning Style: ${studentProfile.learningStyle}
      
      Create a detailed week-by-week study schedule with:
      1. Time allocation for each subject
      2. Study methods and resources
      3. Practice and revision schedules
      4. Milestone checkpoints`;

      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 700,
        temperature: 0.6,
      });

      return completion.choices[0].message.content;
    } catch (error) {
      console.error('Study Plan Generation Error:', error);
      throw new Error('Failed to generate study plan');
    }
  }
}

module.exports = AIService;